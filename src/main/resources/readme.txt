**** Системные требования ****
 Операционная система с установленной Java (http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html).
 Возможность использовать терминал/консоль cmd, bash, git-bash и т.д. Один точно есть в вашей ОС.
 Блокнот или любой текстовой редактор, для изменения файла настроек.
 Браузер с поддержкой JavaScript (любой современный браузер) для просмотра "админки"

**** Запуск приложения ****
 1. Можно использовать sh скрипт - run.sh
 2. Если операционная система, не поддерживает sh, то можно выполнить содаржимое скрипта в теримнале/консоли
    (прим.: в cmd C:\Bot\>java -jar *.jar -Dspring.config.location=./application.properties)

**** Описание настроек ****
 Основные настройки приложения находятся в файле - application.properties :

  server.port - это порт по которому можно будет зайти в "админку" бота, через браузер (прим.: http://localhost:777/)

  scheduler.candle-collect.cron - это таймер для сбора цен с бирж в формате крон (прим.: раз в 30 секунд: 0/30 * * * * *)
  # Внимание! Биржи могут иметь ограничение на частоту запросов. При частых запросах бан по IP!

  strategy.path=file:./ - это путь в файловой системе до скрипта с основной стратегией, файл можно править во время
                работы программы, он автоматически будет подхвачен.

  {название биржи}.symbols - символы/пары по которым будет собираться информация перечисленные через точку с запятой: ;
  {название биржи}.trade.allowed - разрешена ли торговля при запуске приложения (true/false)
  {название биржи}.api.key - ключ для доступа к АПИ биржи, создается в личном кабинете
  {название биржи}.secret.key - секретная часть ключа для доступа к АПИ биржи, создается в личном кабинете

**** Инструкция по админской части ****
 После запуска приложения, можно перейти в браузере по адресу http://localhost:{server.port из настроек выше}

 Если, в файле настроек запрещена торговля при запуске приложения, можно активировать торговлю, с помощью переключателся
 в правом верхнем углу

 В левой части админки, отображаются доступные биржи. При клике по названию, отображается основная информация о балансе
 и сделках.

 В левом нижнем углу, переход к логам. Информация о работе бота отображается в реальном времени.

**** Инструкция по изменению основной стратегии ****
 Основная стратегия бота находятся в срипте - Strategy.groovy

 Скрипт написан на языке груви, он достаточно простой, можно освоиться за 15 минут (https://habrahabr.ru/post/122127/),
 если раньше вы писали советников для метатрейдера или проходили информатику в школе/институте то недолжно возникнуть
 проблем при изменении скрипта. Редактировать можно обычным блокнотом.

 Для изменения поведения бота, можно ориентироваться по комментариям.

 Основные элементы:
                    diff - спред при котором, осуществляется арбитраж (в USD)
                    lot - лот который ужаствует в сделках (в BTC)
                    @Scheduled(fixedDelay = 1000L) - интервал запуска стратегии (в мс)
                    void run() - в фигурных скобках {} ассинхронно выполняются указанные методы, каждый метод отвечает
                    за свою крипто-пару
                    def BTCUSDandBTCUSDT() - базовый метод для арбитража BTCUSD и BTCUSDT

 Текущий скрипт работает с двумя биржами и происходит сравнивание цен, при интеграции новых бирж, будет происходить
 выборка самой выгодной цены.